---
# tasks file for psmp_validateparameters
- name: check EULA is accepted
  fail:
    msg: "You must accept EULA to start the playbook"
  when: (accept_eula|type_debug != 'bool' and accept_eula|lower != "yes") or (accept_eula|type_debug == 'bool' and not accept_eula)

- name: set secure vault password
  block:
    - name: set default value for vault_password
      set_fact:
        vault_password: ''
      when: vault_password is undefined
      no_log: true
    - name: set default value for secure_vault_password
      set_fact:
        secure_vault_password: ''
      when: secure_vault_password is undefined
      no_log: true
    - name: check if the user use 2 passwords
      fail:
        msg: "You must provide either vault_password or secure_vault_password parameter"
      when:
        - (vault_password != '')
        - (secure_vault_password != '')
      no_log: true
    - name: convert to securestring
      win_shell: |
        $secure_vault_password_object = ConvertTo-SecureString "{{ vault_password }}" -AsPlainText -Force
        $secure_vault_password_string = ConvertFrom-SecureString $secure_vault_password_object
        write-output $secure_vault_password_string
      register: secure_vault_password_string
      when: vault_password != ''
      no_log: true
    - name: set varible for secured vault password
      set_fact:
        secure_vault_password: "{{ secure_vault_password_string.stdout_lines[0] }}"
        vault_password: ''
      when: secure_vault_password == ''
      no_log: true
  when:
    - psmp_registration

- name: Check PSMP service status
  stat: 
    path: "/etc/init.d/psmpsrv"
  register: psmp_service_info

- name: Set psmp exists
  set_fact:
    psmp_exists: true
  when: psmp_service_info.stat.exists
